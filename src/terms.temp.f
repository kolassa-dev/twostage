      subroutine bivtail(x1,x2,tail,rho,k111,k112,k122,
     x    k222,k1111,k1112,k1122,k1222,k2222,nn)
      double precision rho,k111,k112,k122,k222,
     x    k1111,k1112,k1122,k1222,k2222,x1,x2,tail(2),rtni,rtn
c     double precision mratio,pym
      double precision pb2,p2,px,py,p1c,p2c,pxm
      integer nn
      double precision phi2,phibar1,phidens
c     double precision phibar2
      rtni=1/sqrt(dble(nn))
      rtn=sqrt(dble(nn))
c     pb2=phibar2(rtn*x1,rtn*x2,rho)
      pb2=tail(2)
c     write(6,*) "In bivtail pb2",pb2,"k111",k111,"k1111",k1111
      p2=phi2(rtn*x1,rtn*x2,rho)
      px=phidens(rtn*x1)
      py=phidens(rtn*x2)
      pxm=phibar1(rtn*x1)
c     pym=phibar1(rtn*x2)
      p2c=phibar1(rtn*(x2-rho*x1)/sqrt(1.0d0-rho**2))
      p1c=phibar1(rtn*(x1-rho*x2)/sqrt(1.0d0-rho**2))
c     write(6,*) "In bivtail x1",x1,"x2",x2,"rtni",rtni
c     write(6,*) "in bivtail rtn",rtn,"pb2",pb2
c     write(6,*) "In bivtail pxm",pxm,"p2c",p2c,"p1c",p1c,"px",px,"py",py
c     mratio=p1c/phidens(rtn*(x1-rho*x2)/sqrt(1-rho**2))
      tail(1)=
     -        pxm + (px*rtni*(3*k1111*rtni*x1*(-3 + x1**2) + 
     -       12*k111*(-1 + x1**2) + 
     -       k111**2*rtni*x1*(15 - 10*x1**2 + x1**4)))/72.
      tail(2)=
     -        pb2 + (rtni*(-(p2*
     -          (rho**2*(k222*x1 + k111*x2) + 
     -            3*(k112*x1 + k122*x2) + 
     -            rho**3*(k111*x1 + k222*x2) - 
     -            rho*(2*k111*x1 + 3*k122*x1 + 3*k112*x2 + 
     -               2*k222*x2))) + 
     -       (-1 + rho**2)*
     -        (k111*p2c*px*(-1 + x1**2) + 
     -          k222*p1c*py*(-1 + x2**2))))/(6.*(-1 + rho**2))
     -    + (rtni**2*((12*k1112*p2*
     -          (-1 + rho**2*(1 + x1**2) - 2*rho*x1*x2 + 
     -            x2**2))/(-1 + rho**2)**2 + 
     -       (6*k111*k112*p2*
     -          (3*(-1 + rho**2)**2 + 
     -            6*(-1 + rho**2)*(x1 - rho*x2)**2 + 
     -            (x1 - rho*x2)**4))/(-1 + rho**2)**4 + 
     -       (6*k122*k222*p2*
     -          (3 + rho**4*(3 + 6*x1**2 + x1**4) - 
     -            4*rho**3*x1*(3 + x1**2)*x2 - 6*x2**2 + 
     -            x2**4 - 4*rho*x1*x2*(-3 + x2**2) + 
     -            6*rho**2*(1 + x1**2)*(-1 + x2**2)))/
     -        (-1 + rho**2)**4 + 
     -       (12*k1112*p2*
     -          (-1 + x1**2 - 2*rho*x1*x2 + 
     -            rho**2*(1 + x2**2)))/(-1 + rho**2)**2 + 
     -       (18*k1122*p2*
     -          (-rho**3 + x1*x2 + rho**2*x1*x2 - 
     -            rho*(-1 + x1**2 + x2**2)))/(-1 + rho**2)**2
     -        + (3*k2222*
     -          (p1c*py*(-1 + rho**2)**2*x2*(-3 + x2**2) - 
     -            p2*rho*
     -             (-3*rho*x1*x2 + rho**3*x1*x2 + 
     -               rho**2*(5 + x1**2 - 3*x2**2) + 
     -               rho**4*(-2 + x2**2) + 3*(-1 + x2**2))))/
     -        (-1 + rho**2)**2 - 
     -       (9*k122**2*p2*
     -          (3*rho**5*(1 + x1**2) - 
     -            rho**4*x1*(9 + x1**2)*x2 - 
     -            x1*x2*(-3 + x2**2) - 
     -            3*rho**2*x1*x2*(-2 + x1**2 + x2**2) + 
     -            rho**3*
     -             (-6 + x1**4 + 6*x2**2 + 3*x1**2*x2**2) + 
     -            rho*(3 - 6*x2**2 + x2**4 + 
     -               3*x1**2*(-1 + x2**2))))/(-1 + rho**2)**4
     -        - (6*k112*k222*p2*
     -          (3*rho**5*(1 + x1**2) - 
     -            rho**4*x1*(9 + x1**2)*x2 - 
     -            x1*x2*(-3 + x2**2) - 
     -            3*rho**2*x1*x2*(-2 + x1**2 + x2**2) + 
     -            rho**3*
     -             (-6 + x1**4 + 6*x2**2 + 3*x1**2*x2**2) + 
     -            rho*(3 - 6*x2**2 + x2**4 + 
     -               3*x1**2*(-1 + x2**2))))/(-1 + rho**2)**4
     -        - (9*k112**2*p2*
     -          (-(x1*(-3 + x1**2)*x2) + 
     -            3*rho**5*(1 + x2**2) - 
     -            rho**4*x1*x2*(9 + x2**2) - 
     -            3*rho**2*x1*x2*(-2 + x1**2 + x2**2) + 
     -            rho*(3 + x1**4 - 3*x2**2 + 
     -               3*x1**2*(-2 + x2**2)) + 
     -            rho**3*(-6 + x2**4 + 3*x1**2*(2 + x2**2))))/
     -        (-1 + rho**2)**4 - 
     -       (6*k111*k122*p2*
     -          (-(x1*(-3 + x1**2)*x2) + 
     -            3*rho**5*(1 + x2**2) - 
     -            rho**4*x1*x2*(9 + x2**2) - 
     -            3*rho**2*x1*x2*(-2 + x1**2 + x2**2) + 
     -            rho*(3 + x1**4 - 3*x2**2 + 
     -               3*x1**2*(-2 + x2**2)) + 
     -            rho**3*(-6 + x2**4 + 3*x1**2*(2 + x2**2))))/
     -        (-1 + rho**2)**4 + 
     -       (18*k112*k122*p2*
     -          (2*rho**6 - 4*rho**5*x1*x2 + 
     -            (-1 + x1**2)*(-1 + x2**2) - 
     -            2*rho*x1*x2*(-4 + x1**2 + x2**2) - 
     -            2*rho**3*x1*x2*(2 + x1**2 + x2**2) + 
     -            rho**2*
     -             (x1**4 + x2**2*(-4 + x2**2) + 
     -               4*x1**2*(-1 + x2**2)) + 
     -            rho**4*(-3 + 5*x2**2 + x1**2*(5 + x2**2))))/
     -        (-1 + rho**2)**4 + 
     -       (2*k111*k222*p2*
     -          (2*rho**6 - 4*rho**5*x1*x2 + 
     -            (-1 + x1**2)*(-1 + x2**2) - 
     -            2*rho*x1*x2*(-4 + x1**2 + x2**2) - 
     -            2*rho**3*x1*x2*(2 + x1**2 + x2**2) + 
     -            rho**2*
     -             (x1**4 + x2**2*(-4 + x2**2) + 
     -               4*x1**2*(-1 + x2**2)) + 
     -            rho**4*(-3 + 5*x2**2 + x1**2*(5 + x2**2))))/
     -        (-1 + rho**2)**4 + 
     -       (3*k1111*(p2c*px*(-1 + rho**2)**2*x1*
     -             (-3 + x1**2) - 
     -            p2*rho*
     -             (rho**4*(-2 + x1**2) + 3*(-1 + x1**2) - 
     -               3*rho*x1*x2 + rho**3*x1*x2 + 
     -               rho**2*(5 - 3*x1**2 + x2**2))))/
     -        (-1 + rho**2)**2 + 
     -       k222**2*(p1c*py*x2*(15 - 10*x2**2 + x2**4) - 
     -          (p2*rho*(rho**5*x1*x2*
     -                (32 + x1**2 - 5*x2**2) - 
     -               5*rho**3*x1*x2*(11 + x1**2 - 2*x2**2) + 
     -               rho**7*x1*x2*(-7 + x2**2) - 
     -               10*rho*x1*x2*(-3 + x2**2) + 
     -               rho**8*(8 - 9*x2**2 + x2**4) + 
     -               5*(3 - 6*x2**2 + x2**4) + 
     -               rho**4*
     -                (63 + x1**4 - 85*x2**2 + 10*x2**4 + 
     -                  x1**2*(14 - 5*x2**2)) + 
     -               rho**6*
     -                (-36 + 44*x2**2 - 5*x2**4 + 
     -                  x1**2*(-4 + x2**2)) - 
     -               10*rho**2*
     -                (5 - 8*x2**2 + x2**4 - 
     -                  x1**2*(-1 + x2**2))))/(-1 + rho**2)**4
     -          ) + k111**2*
     -        (p2c*px*x1*(15 - 10*x1**2 + x1**4) - 
     -          (p2*rho*(rho**8*(8 - 9*x1**2 + x1**4) + 
     -               5*(3 - 6*x1**2 + x1**4) + 
     -               rho**7*x1*(-7 + x1**2)*x2 - 
     -               10*rho*x1*(-3 + x1**2)*x2 + 
     -               5*rho**3*x1*x2*(-11 + 2*x1**2 - x2**2) + 
     -               rho**5*x1*x2*(32 - 5*x1**2 + x2**2) - 
     -               10*rho**2*
     -                (5 + x1**4 + x2**2 - x1**2*(8 + x2**2))
     -                + rho**4*
     -                (63 + 10*x1**4 + 14*x2**2 + x2**4 - 
     -                  5*x1**2*(17 + x2**2)) + 
     -               rho**6*
     -                (-5*x1**4 - 4*(9 + x2**2) + 
     -                  x1**2*(44 + x2**2))))/(-1 + rho**2)**4
     -          )))/72.
c     write(6,*) "In bivtail tail=",tail(1),tail(2)
      return
      end
c####################################################
      subroutine bivcorn(x1,x2,x1p,x1pp,x2p,x2pp,rho,k111,k112,k122,
     x    k222,k1111,k1112,k1122,k1222,k2222,nn,alpha,intflg)
      double precision x1p,x1pp,x2p,x2pp,rho,k111,k112,k122,k222,
     x    k1111,k1112,k1122,k1222,k2222,x1,x2,mratio,rtni,rtn,
     x    alpha(2)
      double precision pb2,p2,px,py,p1c,p2c,pxm,pym
      integer nn
      double precision phi2,phibar1,phidens
      logical intflg
c     double precision phibar2
      rtni=1/sqrt(dble(nn))
      rtn=sqrt(dble(nn))
c     pb2=phibar2(rtn*x1,rtn*x2,rho)
c     pb2=tail(1)
      pb2=alpha(2)
      p2=phi2(rtn*x1,rtn*x2,rho)
      px=phidens(rtn*x1)
      py=phidens(rtn*x2)
      pxm=phibar1(rtn*x1)
      pym=phibar1(rtn*x2)
      p2c=phibar1(rtn*(x2-rho*x1)/sqrt(1.0d0-rho**2))
      p1c=phibar1(rtn*(x1-rho*x2)/sqrt(1.0d0-rho**2))
      mratio=p1c/phidens(rtn*(x1-rho*x2)/sqrt(1-rho**2))
      alpha(2)=pb2
      alpha(1)=phibar1(rtn*x1)
      x1p=
     -(k111*(-1 + x1**2))/6.
      x2p=
     -        (k222*mratio*(-1 + rho**2)**2*(-1 + x2**2) + 
     -    Sqrt(1 - rho**2)*
     -     (rho**2*(k222*x1 + k111*x2) + 
     -       3*(k112*x1 + k122*x2) + 
     -       rho**3*(k111*x1 + k222*x2) - 
     -       rho*(2*k111*x1 + 3*k122*x1 + 3*k112*x2 + 
     -          2*k222*x2)))/(6.*mratio*(-1 + rho**2)**2)
      x1pp=
     -        (10*k111**2*x1 - 9*k1111*x1 - 4*k111**2*x1**3 + 
     -    3*k1111*x1**3)/36.
      x2pp=
     -        (rho*(-1 + rho**2)*
     -     (rho**2*(k222*x1 + k111*x2) + 
     -        3*(k112*x1 + k122*x2) + 
     -        rho**3*(k111*x1 + k222*x2) - 
     -        rho*(2*k111*x1 + 3*k122*x1 + 3*k112*x2 + 
     -           2*k222*x2))**2 - 
     -    mratio**3*(1 - rho**2)**4.5*x2*
     -     (-3*k2222*(-3 + x2**2) + 2*k222**2*(-5 + 2*x2**2))
     -     - mratio*Sqrt(1 - rho**2)*
     -     (9*(k112**2*x1**2*x2 + k122**2*x2*(-2 + x2**2) + 
     -          2*k112*k122*x1*(-1 + x2**2)) + 
     -       rho**8*(k111**2*x1**2*x2 + 
     -          2*k111*k222*x1*(1 + x2**2) + 
     -          k222**2*x2*(2 + x2**2)) + 
     -       2*rho**7*(k222**2*x1 + 
     -          k111**2*x1*(1 - x1**2 + x2**2) + 
     -          k111*k222*x2*(2 - x1**2 + x2**2)) + 
     -       rho**2*(4*k111**2*x1**2*x2 + 
     -          9*k122**2*x2*(2 + 5*x1**2 + x2**2) + 
     -          x2*(4*k222**2*(-2 + x2**2) + 
     -             9*k112**2*(-2 + 5*x1**2 + x2**2) + 
     -             6*k112*k222*(-4 + 5*x1**2 + 2*x2**2)) + 
     -          2*k111*(4*k222*x1*(-1 + x2**2) + 
     -             3*k122*x2*(-2 + 6*x1**2 + x2**2) + 
     -             3*k112*x1*(-3 + 4*x1**2 + 3*x2**2)) + 
     -          6*k122*x1*
     -           (6*k112*(x1**2 + 2*x2**2) + 
     -             k222*(-3 + 7*x2**2))) + 
     -       rho**4*(24*k122*k222*x1 + 12*k122*k222*x1**3 + 
     -          16*k222**2*x2 + 9*k122**2*x1**2*x2 + 
     -          9*k222**2*x1**2*x2 + 
     -          9*k112**2*x2*(2 + x2**2) + 
     -          k111**2*x2*(-2 + 8*x1**2 + x2**2) + 
     -          6*k112*(3*k122*x1*(1 + x2**2) + 
     -             k222*x2*(6 + x1**2 + x2**2)) + 
     -          2*k111*(3*k122*x2*(2 + x1**2 + x2**2) + 
     -             k222*x1*(7 + 4*x1**2 + 5*x2**2) - 
     -             6*k112*x1*(x1**2 - 2*(1 + x2**2)))) - 
     -       6*rho*(3*k112**2*x1*(-1 + x1**2 + x2**2) + 
     -          k122*(2*k222*x2*(-2 + x2**2) + 
     -             2*k111*x1*(-1 + x2**2) + 
     -             3*k122*x1*(-1 + 2*x2**2)) + 
     -          k112*(2*k222*x1*(-1 + x2**2) + 
     -             x2*(2*k111*x1**2 + 
     -                3*k122*(-2 + 3*x1**2 + x2**2)))) - 
     -       2*rho**3*(9*k122**2*x1 - 2*k222**2*x1 + 
     -          9*k122**2*x1**3 + 18*k122*k222*x2 + 
     -          21*k122*k222*x1**2*x2 + 9*k122**2*x1*x2**2 + 
     -          6*k222**2*x1*x2**2 + 3*k122*k222*x2**3 + 
     -          2*k111**2*x1*(-1 + 2*x1**2 + x2**2) + 
     -          9*k112**2*x1*(1 + 2*x2**2) + 
     -          3*k112*(3*k122*x2*(2 + 3*x1**2 + x2**2) + 
     -             2*k222*x1*(1 + x1**2 + 3*x2**2)) + 
     -          k111*(6*k122*x1*(1 + 2*x1**2 + 2*x2**2) + 
     -             x2*(2*k222*(-2 + 5*x1**2 + x2**2) + 
     -                3*k112*(-2 + 7*x1**2 + x2**2)))) + 
     -       2*rho**5*(k111**2*x1*(-3 + 4*x1**2 - 2*x2**2) + 
     -          k222*(-(k222*x1*(3 + x1**2 - 3*x2**2)) + 
     -             3*x2*(2*k112*x1*x2 + 
     -                k122*(2 + x1**2 + x2**2))) + 
     -          k111*(6*k122*x1**3 - 
     -             x2*(k222*(6 - 5*x1**2 + x2**2) + 
     -                k112*(6 - 9*x1**2 + 3*x2**2)))) - 
     -       rho**6*(-(k111**2*x2*(2 - 7*x1**2 + x2**2)) + 
     -          2*k111*x1*
     -           (3*k122*x1*x2 + 3*k112*(1 + x2**2) + 
     -             2*k222*(2 + x1**2 + 2*x2**2)) + 
     -          k222*(6*k122*x1*(1 + x2**2) + 
     -             x2*(6*k112*(2 + x2**2) + 
     -                k222*(10 + 3*x1**2 + 3*x2**2))))) + 
     -    mratio**2*(rho**9*
     -        (6*k1111 + 6*k2222 - 3*k1111*x1**2 + 
     -          5*k111**2*(-1 + x1**2) - 4*k111*k222*x1*x2 - 
     -          3*k2222*x2**2 + k222**2*(-5 + x2**2)) - 
     -       3*(8*k1112 - 4*k122*k222 - 4*k1112*x1**2 - 
     -          6*k1122*x1*x2 + 9*k122**2*x1*x2 - 
     -          3*k112**2*x1*(-3 + x1**2)*x2 - 
     -          4*k1112*x2**2 + 4*k122*k222*x2**2 - 
     -          3*k122**2*x1*x2**3 + 
     -          4*k111*(k112*(-1 + 2*x1**2) + k122*x1*x2) - 
     -          6*k112*k122*(-1 + x1**2)*(-1 + x2**2)) + 
     -       rho**8*(k111**2*x1*(5 + x1**2)*x2 + 
     -          2*k111*k222*
     -           (1 - 3*x2**2 + x1**2*(-1 + x2**2)) + 
     -          x1*x2*(-3*(k1111 + k2222) + 
     -             k222**2*(1 + x2**2))) + 
     -       rho**7*(-27*k1111 - 18*k1122 + 22*k222**2 - 
     -          27*k2222 + 15*k1111*x1**2 + 2*k222**2*x1**2 - 
     -          3*k2222*x1**2 + 12*k122*k222*x1*x2 - 
     -          3*k1111*x2**2 - 4*k222**2*x2**2 + 
     -          15*k2222*x2**2 + k222**2*x1**2*x2**2 - 
     -          k222**2*x2**4 + 
     -          k111*(6*k122*(-1 + x1**2) + 20*k222*x1*x2) + 
     -          6*k112*k222*(-1 + 3*x2**2) + 
     -          k111**2*(-x1**4 + x1**2*(-24 + x2**2) + 
     -             2*(11 + x2**2))) + 
     -       rho*(9*k1111 + 18*k1122 - 27*k122**2 - 
     -          10*k222**2 + 9*k2222 - 9*k1111*x1**2 - 
     -          18*k1122*x1**2 + 27*k122**2*x1**2 + 
     -          10*k111**2*(-1 + 2*x1**2) - 48*k1112*x1*x2 + 
     -          48*k122*k222*x1*x2 - 18*k1122*x2**2 + 
     -          54*k122**2*x2**2 + 12*k222**2*x2**2 - 
     -          9*k2222*x2**2 - 27*k122**2*x1**2*x2**2 - 
     -          12*k122*k222*x1*x2**3 - 9*k122**2*x2**4 - 
     -          9*k112**2*
     -           (3 + x1**4 - 3*x2**2 + 3*x1**2*(-2 + x2**2))
     -           - 12*k112*
     -           (k222*(-1 + x1**2)*(-1 + x2**2) + 
     -             3*k122*x1*x2*(-4 + x1**2 + x2**2)) - 
     -          12*k111*(k112*x1*(-5 + x1**2)*x2 + 
     -             k122*(1 - x2**2 + x1**2*(-2 + x2**2)))) - 
     -       rho**6*(-24*k1112 - 36*k112*k122 - 6*k122*k222 - 
     -          12*k1112*x1**2 - 6*k122*k222*x1**2 - 
     -          15*k1111*x1*x2 - 18*k1122*x1*x2 + 
     -          6*k112*k222*x1*x2 + 10*k222**2*x1*x2 - 
     -          15*k2222*x1*x2 + k222**2*x1**3*x2 - 
     -          12*k1112*x2**2 + 18*k122*k222*x2**2 + 
     -          6*k122*k222*x1**2*x2**2 + 
     -          6*k112*k222*x1*x2**3 + 5*k222**2*x1*x2**3 + 
     -          k111**2*x1*x2*(22 + 5*x1**2 + x2**2) + 
     -          2*k111*(3*k122*x1*(-1 + x1**2)*x2 + 
     -             3*k112*(-1 + x1**2)*(1 + x2**2) + 
     -             k222*(x1**4 + x2**2*(-10 + x2**2) + 
     -                4*x1**2*(-1 + x2**2)))) + 
     -       rho**2*(72*k1112 - 12*k1112*x1**2 + 
     -          9*k1111*x1*x2 - 54*k112**2*x1*x2 - 
     -          18*k1122*x1*x2 - 78*k112*k222*x1*x2 - 
     -          20*k222**2*x1*x2 + 9*k2222*x1*x2 + 
     -          27*k112**2*x1**3*x2 + 18*k112*k222*x1**3*x2 + 
     -          4*k111**2*x1*(-6 + x1**2)*x2 - 
     -          12*k1112*x2**2 + 27*k112**2*x1*x2**3 + 
     -          24*k112*k222*x1*x2**3 + 4*k222**2*x1*x2**3 + 
     -          27*k122**2*x1*x2*(-2 + x1**2 + x2**2) + 
     -          2*k111*(2*k222*(-1 + 2*x1**2)*(-1 + x2**2) + 
     -             3*k122*x1*x2*(-7 + 4*x1**2 + 3*x2**2) + 
     -             3*k112*(-1 + x1**2)*(3 + 2*x1**2 + 5*x2**2)
     -             ) + 6*k122*
     -           (3*k112*
     -              (x1**4 + x2**2*(-4 + x2**2) + 
     -                4*x1**2*(-1 + x2**2)) + 
     -             k222*(-3 - 5*x2**2 + 2*x2**4 + 
     -                5*x1**2*(-1 + x2**2)))) + 
     -       rho**5*(45*k1111 + 54*k1122 - 27*k122**2 - 
     -          39*k222**2 + 45*k2222 - 30*k1111*x1**2 - 
     -          18*k1122*x1**2 - 27*k122**2*x1**2 - 
     -          10*k222**2*x1**2 + 6*k2222*x1**2 - 
     -          k222**2*x1**4 - 48*k1112*x1*x2 - 
     -          48*k122*k222*x1*x2 + 6*k1111*x2**2 - 
     -          18*k1122*x2**2 + 11*k222**2*x2**2 - 
     -          30*k2222*x2**2 + k222**2*x1**2*x2**2 + 
     -          12*k122*k222*x1*x2**3 + 4*k222**2*x2**4 - 
     -          27*k112**2*(1 + x2**2) + 
     -          k111**2*(-39 + 4*x1**4 - 10*x2**2 - x2**4 + 
     -             x1**2*(47 + x2**2)) + 
     -          6*k112*(-12*k122*x1*x2 + 
     -             k222*(x2**2*(-10 + x2**2) + 
     -                x1**2*(-4 + x2**2))) + 
     -          2*k111*(3*k122*(-4 + x1**2)*(x1**2 + x2**2) + 
     -             2*x1*x2*
     -              (3*k112*(-1 + x1**2) + 
     -                k222*(-13 + x1**2 + x2**2)))) - 
     -       rho**3*(33*k1111 + 54*k1122 - 54*k122**2 - 
     -          32*k222**2 + 33*k2222 - 27*k1111*x1**2 - 
     -          36*k1122*x1**2 - 8*k222**2*x1**2 + 
     -          3*k2222*x1**2 + 9*k122**2*x1**4 - 
     -          96*k1112*x1*x2 + 12*k122*k222*x1*x2 + 
     -          24*k122*k222*x1**3*x2 + 3*k1111*x2**2 - 
     -          36*k1122*x2**2 + 54*k122**2*x2**2 + 
     -          20*k222**2*x2**2 - 27*k2222*x2**2 + 
     -          27*k122**2*x1**2*x2**2 + 
     -          8*k222**2*x1**2*x2**2 + 
     -          24*k122*k222*x1*x2**3 + 4*k222**2*x2**4 + 
     -          9*k112**2*
     -           (-6 + x2**4 + 3*x1**2*(2 + x2**2)) + 
     -          4*k111**2*
     -           (x1**4 - 2*(4 + x2**2) + 2*x1**2*(6 + x2**2))
     -            + 6*k112*
     -           (6*k122*x1*x2*(2 + x1**2 + x2**2) + 
     -             k222*(-3 + x1**4 - 5*x2**2 + 2*x2**4 + 
     -                x1**2*(-2 + 5*x2**2))) + 
     -          6*k111*(2*x1*x2*
     -              (k222*(-3 + x1**2 + x2**2) + 
     -                2*k112*(2 + x1**2 + x2**2)) + 
     -             k122*(-3 + 2*x1**4 - 2*x2**2 + x2**4 + 
     -                x1**2*(1 + 5*x2**2)))) + 
     -       rho**4*(-72*k1112 - 12*k1112*x1**2 + 
     -          24*k122*k222*x1**2 + 6*k122*k222*x1**4 - 
     -          21*k1111*x1*x2 - 18*k1122*x1*x2 + 
     -          81*k122**2*x1*x2 + 29*k222**2*x1*x2 - 
     -          21*k2222*x1*x2 + 9*k122**2*x1**3*x2 + 
     -          5*k222**2*x1**3*x2 - 12*k1112*x2**2 + 
     -          60*k122*k222*x2**2 + 
     -          12*k122*k222*x1**2*x2**2 + 
     -          4*k222**2*x1*x2**3 - 6*k122*k222*x2**4 + 
     -          9*k112**2*x1*x2*(9 + x2**2) + 
     -          k111**2*x1*x2*(41 + 4*x1**2 + 5*x2**2) + 
     -          6*k112*(k222*x1*x2*(14 + x1**2 + x2**2) + 
     -             k111*(-x1**4 + 2*x1**2*(2 + x2**2) + 
     -                x2**2*(4 + x2**2)) + 
     -             3*k122*(-3 + 5*x2**2 + x1**2*(5 + x2**2)))
     -           + 2*k111*
     -           (3*k122*x1*x2*(8 + x1**2 + x2**2) + 
     -             k222*(-3 + 2*x1**4 - 5*x2**2 + 2*x2**4 + 
     -                x1**2*(1 + 5*x2**2))))))/
     -  (36.*mratio**3*(1 - rho**2)**4.5)
      return
      end
c################################################################
      double precision function phi2(x1,x2,rho)
      double precision x1,x2,rho
      phi2=exp((-x1**2*0.5-x2**2*0.5+rho*x1*x2)/(1.0d0-rho**2))/(
     x 2.0d0*3.14159265358979)
      phi2=phi2/sqrt(1.0d0-rho**2)
      return
      end
c################################################################
c     double precision function phibar2(x1,x2,rho)
c     double precision x1,x2,rho,bivnor
c     phibar2=bivnor(-x1,-x2,rho)
c     return
c     end
c################################################################
      double precision function phibar1(x1)
      double precision x1
      phibar1=erfc(x1/dsqrt(2.0d0))/2.0
      return
      end
c################################################################
      double precision function phidens(x1)
      double precision x1
      phidens=exp(-x1**2/2.0d0)/dsqrt(2.0d0*3.14159265358979)
      return
      end
